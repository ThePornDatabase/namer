[tool.poetry]
name = "namer"
version = "1.12.1"
description = "A namer of video files based on metadata from the porndb."
readme = "readme.rst"
authors = ["4c0d3r <4c0d3r@protonmail.com>"]
include = ["**/web/public/assets/**/*", "**/web/templates/**/*", "**/namer.cfg.default", "namer/tools/videohashes*"]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
rapidfuzz = "^2.0.5"
watchdog = "^2.1.6"
pathvalidate = "^2.5.0"
requests = "^2.27.1"
mutagen = "^1.45.1"
schedule = "^1.1.0"
loguru = "^0.6.0"
Unidecode = "^1.3.4"
flask = "^2.2.0"
jinja2 = "^3.1.2"
waitress = "^2.1.1"
Flask-Compress = "^1.12"
Pillow = "^9.1.1"
requests-cache = "^0.9.4"
ffmpeg-python = "^0.2.0"
jsonpickle = "^3.0.1"
ConfigUpdater = "^3.1.1"
imagehash = "^4.3.1"
oshash = "^0.1.1"

[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
coverage = "^7.0.0"
flakeheaven = "^3.0.0"
selenium = "^4.2.0"
webdriver-manager = "^3.7.0"
assertpy = "^1.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
poethepoet = ">=0.16.0"

[tool.flakeheaven]
exclude = [".git", "__pycache__", "docs/source/conf.py", "old", "build", "dist", "*migrations*", "init"]
format = "colored"
show_source = false
max_line_length = 150

[tool.flakeheaven.plugins]
mccabe = ["+*"]
pycodestyle = ["+*", "-E501", "-E722"]
pyflakes = ["+*"]
pylint = ["+*", "-C0301", "-I1101"]

[tool.pylint.'MASTER']
max-line-length = 150

[tool.poe.tasks]
install_npm = {shell="pnpm install"}
build_node = {shell="pnpm run build"}
install_videohashes_src = {shell="command -v git >/dev/null && git submodule update || echo 'Skipping git sub module update'"}
build_videohashes = {shell="make build -C ./videohashes"}
move_videohashes = {"script" = "shutil:copytree('./videohashes/dist', './namer/tools', dirs_exist_ok=True)"}
build_namer = {shell="poetry build"}
build_deps = ["install_npm", "build_node", "install_videohashes_src", "build_videohashes", "move_videohashes"]
test_format = {shell="poetry run flakeheaven lint"}
test_namer = {shell="poetry run pytest --log-cli-level=info --capture=no"}
test = ["test_format", "test_namer"]
build_all = ["build_deps", "test", "build_namer"]

[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"
